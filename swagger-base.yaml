---
swagger: "2.0"
info:
  version: "1.0"
  title: "AWS Serverless Web Chat"

host: "9q91nn81w3.execute-api.us-east-1.amazonaws.com"
basePath: "/v1"
schemes:
  - "https"

x-boa-cors-enable: true
x-boa-cors-headers: Content-Type
x-boa-cors-max-age: 3600

x-boa-lambda-default-error-regex-format: '.*http-status\":\s*{error_code}.*'
x-boa-lambda-default-error-response-template: |-
  #set ($errorMessageObj = $util.parseJson($input.path('$.errorMessage')))
  #set ($bodyObj = $util.parseJson($input.body))
  {
      "message": "$util.escapeJavaScript($errorMessageObj.message).replaceAll("\\'","'")"
  }

x-boa-lambda-catchall-error-status-code: 502
x-boa-lambda-catchall-error-description: Internal server error
x-boa-lambda-catchall-error-regex-format: '((.*http-status\":\s*502.*)|^(?!.*http-status)(\n|.)+)'
x-boa-lambda-catchall-error-response-template: |-
  {
      "message": "Internal server error"
  }

tags:
  - name: global
    description: Global API resources
  - name: chat
    description: Chat resources
  - name: user
    description: User and login resources

paths:
  
  /api:
    get:
      summary: Get global API options
      description: Returns necessary parameters for AWS v4 signatures, including service and region.
      x-boa-static-body-mapping: |+
        {
          "aws-v4-sig": {
            "region": "${stageVariables.AwsRegion}",
            "service": "execute-api"
          }
        }
      tags:
        - global
      produces:
        - application/json
      responses:
        '200':
          description: Success
          examples:
            application/json:
              aws-v4-sig:
                region: us-west-2
                service: execute-api
          schema:
            $ref: '#/definitions/GlobalApiSettings'
  
  /room:
    post:
      summary: Create a chat room
      description: Returns the newly-created chat room's id.
      x-boa-lambda-resource-name: RoomGeneratorFunction
      tags:
        - chat
      produces:
        - application/json
      responses:
        '200':
          description: Success
          examples:
            application/json:
              id: 0372c56c-e8c1-4080-808f-02a3ef451981
          schema:
            $ref: '#/definitions/NewRoomResponse'
      security:
        - sigv4: []
  
  /room/{room-id}/message:
    get:
      summary: Get messages from the room's message log
      description: |+
        The room's message log doesn't allow for long polling or notification 
        of new messages, so this method is most suitable for fetching prior 
        messages.
        
        Examples would include fetching the prior messages from a room after 
        joining, or fetching a closed room's history.
      x-boa-lambda-resource-name: RoomMessageLogFetcherFunction
      tags:
        - chat
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Success
          examples:
            application/json:
              placeholder: true
      security:
        - sigv4: []
        
    post:
      summary: Post a new message to a chat room
      description: Returns the message's unique id.
      x-boa-lambda-resource-name: RoomMessagePosterFunction
      tags:
        - chat
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: room-id
          description: The id of the room to which to post the message.
          in: path
          required: true
          type: string
        - in: body
          name: body
          description: The message to post.
          required: true
          schema:
            $ref: '#/definitions/PostChatMessageRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message-id: 90fd827f-1b61-4d75-a53f-6742db519971
          schema:
            $ref: '#/definitions/NewRoomMessageResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: 'Unsupported message version: fish'
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
        - sigv4: []

  /room/{room-id}/session:
    post:
      summary: Create a new chat room session
      description: |+
        Returns the new chat room session's id.
        
        A chat room session represents an endpoint the client can poll 
        continuously to receive messages posted to the room as they arrive.
      x-boa-lambda-resource-name: RoomSessionGeneratorFunction
      tags:
        - chat
      produces:
        - application/json
      parameters:
        - name: room-id
          description: The id of the room for which to create the session.
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Success
          examples:
            application/json:
              id: e373e692-2429-46e1-a34e-ff8cb4575eb5
          schema:
            $ref: '#/definitions/NewRoomSessionResponse'
      security:
        - sigv4: []
  
  /room/{room-id}/session/{session-id}/message:
    get:
      summary: Fetch messages from a chat room session
      description: |+
        This method will wait up to 20 seconds to return, but will return as 
        soon as at least one message is available.
        
        Messages received will be returned again after 30 seconds unless the 
        client acknowledges receipt with the appropriate method.
        
        It can occasionally return duplicate messages across requests, so 
        clients must handle deduplication separately.\
      tags:
        - chat
      produces:
        - application/json
      parameters:
        - name: room-id
          description: The id of the room to which the session belongs.
          in: path
          required: true
          type: string
        - name: session-id
          description: The id of the room session from which to poll for messages.
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Success
          examples:
            application/json:
              receipt-handles:
                - AQEBf1GhQWt2bnKWcyEQ8G+TeS6yDDp...
              messages:
                - author-name: webchatuser1@example.com
                  identity-id: c9c708e9-7c19-49d9-81a7-29a1c10cded3
                  message: Hello World!
                  timestamp: 1480725356
          schema:
            $ref: '#/definitions/GetRoomMessagesResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: Session doesn't exist or you don't have access to it.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        '500':
          description: Bad request
          examples:
            application/json:
              message: Internal server error
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: arn:aws:iam::000000000000:role/${stageVariables.WebChatApiRoomMessagePollerRole}
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: |-
                #set($sqsMessages = $util.parseJson($input.json('$.ReceiveMessageResponse.ReceiveMessageResult.messages')))
                {
                    "messages": [
                        #foreach( $sqsMessage in $sqsMessages )
                        #set($chatMessage = $util.parseJson($util.parseJson($sqsMessage.Body).Message))
                {
                            "message-id": "$sqsMessage.MessageId",
                #foreach($paramName in $chatMessage.keySet())            "$util.escapeJavaScript($paramName).replaceAll("\'","'")": "$util.escapeJavaScript($chatMessage.get($paramName)).replaceAll("\\'","'")"#if($foreach.hasNext),
                #end
                #end
            
                        }#if($foreach.hasNext),
                #end
                        #end

                    ],
                    "receipt-handles": [
                #foreach( $sqsMessage in $sqsMessages )
                        "$sqsMessage.ReceiptHandle"#if($foreach.hasNext),
                #end#end
                    ]
                }
          4\d{2}:
            statusCode: "400"
            responseTemplates:
              application/json: |-
                {
                    "message": "Session doesn't exist or you don't have access to it."
                }
          5\d{2}:
            statusCode: "500"
            responseTemplates:
              application/json: |-
                {
                    "message": "Internal server error"
                }
        uri: arn:aws:apigateway:aws-region:sqs:path/000000000000/${stageVariables.AppPrefix}-{room-id}-{session-id}/?Action=ReceiveMessage&MaxNumberOfMessages=10&WaitTimeSeconds=20
        requestParameters:
          integration.request.path.room-id: method.request.path.room-id
          integration.request.path.session-id: method.request.path.session-id
        passthroughBehavior: when_no_templates
        httpMethod: GET
        type: aws
    
    put:
      summary: Acknowledge messages retrieved from a chat room session
      description: |+
        Send an array of receipt handles returned from polling for chat room 
        session messages to flag them as received. This removes them from 
        the queue to prevent receiving the same messages multiple times.
      tags:
        - chat
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: room-id
          description: The id of the room to which the session belongs.
          in: path
          required: true
          type: string
        - name: session-id
          description: The id of the room session from which the messages were received.
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AcknowledgeChatRoomSessionMessagesRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json: {}
          schema:
            $ref: '#/definitions/Empty'
        '400':
          description: Bad request
          examples:
            application/json:
              message: Value for "receipt-handles" must be an array including at least one string.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        '500':
          description: Bad request
          examples:
            application/json:
              message: Internal server error
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        credentials: arn:aws:iam::000000000000:role/${stageVariables.WebChatApiRoomMessageAcknowledgerRole}
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: '{}'
          4\d{2}:
            statusCode: "400"
            responseTemplates:
              application/json: |-
                #set($errorCode = $util.parseJson($input.json('$.Error.Code')))
                #if($errorCode == "AWS.SimpleQueueService.NonExistentQueue")
                #set($errorMessage = "Room session doesn't exist or you don't have access to it.")
                #elseif($errorCode == "AccessDenied")
                #set($errorMessage = "Room session doesn't exist or you don't have access to it.")
                #elseif($errorCode == "AWS.SimpleQueueService.EmptyBatchRequest")
                #set($errorMessage = "Request must contain at least one receipt handle.")
                #elseif($errorCode == "AWS.SimpleQueueService.TooManyEntriesInBatchRequest")
                #set($errorMessage = "Request must contain at most ten receipt handles.")
                #else
                #set($errorMessage = $errorCode)
                #end
                {
                    "message": "$errorMessage"
                }
          5\d{2}:
            statusCode: "500"
            responseTemplates:
              application/json: |-
                {
                    "message": "Internal server error"
                }
        requestTemplates:
          application/json: |-
            #set($handlesArray = $util.parseJson($input.json('$.receipt-handles')))
            #set($handleCount = 0)
            Action=DeleteMessageBatch&Version=2012-11-05#foreach( $eachHandle in $handlesArray )
            #set($handleCount = $handleCount + 1)
            &DeleteMessageBatchRequestEntry.${handleCount}.Id=msg$handleCount&DeleteMessageBatchRequestEntry.${handleCount}.ReceiptHandle=$util.urlEncode($eachHandle)#end
        uri: arn:aws:apigateway:aws-region:sqs:path/000000000000/${stageVariables.AppPrefix}-{room-id}-{session-id}/
        requestParameters:
          integration.request.path.room-id: method.request.path.room-id
          integration.request.path.session-id: method.request.path.session-id
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        passthroughBehavior: when_no_templates
        httpMethod: POST
        type: aws
  
  /user:
    patch:
      summary: Update a user's profile attributes
      x-boa-lambda-resource-name: UserUpdateHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: 
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message: E-mail address verification message sent.
              registration-id: db69f82d-1627-4a64-ad19-6edc6053fa45
          schema:
            $ref: '#/definitions/UserUpdateResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: Invalid attribute specified.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
            
      security:
        - sigv4: []
  
  /user/forgot:
    post:
      summary: Request a password reset code be e-mailed to the specified address
      description: |+
        The password reset code can be sent with a change forgotten password 
        request to change a user's password.
      x-boa-lambda-resource-name: UserForgotPasswordHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/SendForgotPasswordCodeRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message: Password reset code sent.
          schema:
            $ref: '#/definitions/BasicAcknowledgementResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: Value for "email-address" must be specified in request body.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
  
  /user/forgot/password:
    post:
      summary: Use a password reset code to change a user's password
      description: |+
        A message containing a password reset code for the user is sent to 
        the user's confirmed e-mail address after requesting it separately.
      x-boa-lambda-resource-name: UserChangePasswordHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangeForgottenPasswordRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message: Password changed successfully.
          schema:
            $ref: '#/definitions/BasicAcknowledgementResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: The password reset code specified is invalid.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
  
  /user/password:
    post:
      summary: Use a user's existing password to change the user's password
      x-boa-lambda-resource-name: UserChangePasswordHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/ChangeKnownPasswordRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message: Password changed successfully.
          schema:
            $ref: '#/definitions/BasicAcknowledgementResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: The password reset code specified is invalid.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
        - sigv4: []
  
  /user/login:
    post:
      summary: Log in with an e-mail address and password
      description: |+
        Returns basic user details and temporary credentials.
        
        Note that the e-mail address used to log in must already be confirmed.
      x-boa-lambda-resource-name: UserLoginHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              credentials:
                access-key-id: ASIAIOAJJTPR7P...
                secret-access-key: 0mJF+cpIcN9XXKM/1GgR9wC...
                session-token: AgoGb3JpZ2luEIT//////////wEa...
                refresh-token: eyJjdHkiOiJKV1QiLCJlbm...
                expiration: 3600
              user:
                email-address: webchatuser1@example.com
                user-id: us-east-1:a08b99db-da0e-4282-9b5a-459419d457a6
          schema:
            $ref: '#/definitions/UserCredentialsRetrievalResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: Password entered is not correct.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  /user/refresh:
    post:
      summary: Use a refresh token to get new temporary credentials
      description: |+
        A refresh token is returned when a user logs in. It can be used 
        multiple times to fetch new temporary credentials until it expires.
        
        After it expires, the user must log in again to retrieve fresh 
        credentials to continue making authenticated requests.
      x-boa-lambda-resource-name: UserLoginHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/UserCredentialRefreshRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              credentials:
                access-key-id: ASIAIOAJJTPR7P...
                secret-access-key: 0mJF+cpIcN9XXKM/1GgR9wC...
                session-token: AgoGb3JpZ2luEIT//////////wEa...
                refresh-token: eyJjdHkiOiJKV1QiLCJlbm...
                expiration: 3600
              user:
                email-address: webchatuser1@example.com
                user-id: us-east-1:a08b99db-da0e-4282-9b5a-459419d457a6
          schema:
            $ref: '#/definitions/UserCredentialsRetrievalResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: The refresh token received is expired.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  /user/register:
    post:
      summary: Register a new user
      description: |+
        This method sends a confirmation code the submitted e-mail address. 
        Registration is not complete until it is confirmed with the code.
      x-boa-lambda-resource-name: UserRegistrationRequestHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/RegisterUserRequest'
      responses:
        '200':
          description: Success
          examples:
            application/json:
              email-address: webchatuser1@example.com
              registration-id: 5ed9ffaf-2e6e-4f3b-b9f3-e45bc1c0e8a5
          schema:
            $ref: '#/definitions/RegisterUserResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: The password entered does not meet validation requirements.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'

  /user/register/verify:
    get:
      summary: Confirm a new user registration with a confirmation code
      x-boa-lambda-resource-name: UserEmailAddressVerificationHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: registration-id
          description: The registration id returned in the prior registration request
          required: true
          type: string
        - in: query
          name: token
          description: |+
            The confirmation code found in the message sent to the user's e-mail 
            address
          required: true
          type: string
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message: E-mail address confirmed successfully.
          schema:
            $ref: '#/definitions/BasicAcknowledgementResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: The confirmation code given is invalid or expired.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
  
  /user/email/verify:
    get:
      summary: Confirm an e-mail address change with existing credentials and a confirmation code
      x-boa-lambda-resource-name: UserEmailAddressVerificationHandlerFunction
      tags:
        - user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: token
          description: |+
            The confirmation code found in the message sent to the user's e-mail 
            address
          required: true
          type: string
      responses:
        '200':
          description: Success
          examples:
            application/json:
              message: E-mail address confirmed successfully.
          schema:
            $ref: '#/definitions/BasicAcknowledgementResponse'
        '400':
          description: Bad request
          examples:
            application/json:
              message: The confirmation code given is invalid or expired.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      security:
        - sigv4: []
  
  /user/{user-id}/avatar:
    get:
      summary: Fetches a user's avatar image.
      description: |+
        Does its own caching and pulling from Gravatar. This avoids having to 
        give out plain MD5 hashes of each user's e-mail address with their 
        avatar (a requirement that would otherwise exist using Gravatar 
        directly).
      x-boa-lambda-resource-name: UserAvatarRequestHandlerFunction
      x-boa-lambda-integration-type: direct
      tags:
        - user
      produces:
        - application/json
      parameters:
        - name: hash
          in: query
          required: false
          type: string
        - name: user-id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad request
          examples:
            application/json:
              message: The user-id specified doesn't represent a valid user.
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
        '502':
          description: Server error
          examples:
            application/json:
              message: Internal server error
          schema:
            $ref: '#/definitions/DefaultErrorResponse'
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            contentHandling: CONVERT_TO_BINARY
            responseParameters:
              method.response.header.Content-Type: '''image/png'''
        cacheNamespace: default
        cacheKeyParameters:
          - method.request.path.user-id
          - method.request.querystring.hash
        type: aws

definitions:
  
  Empty:
    type: object
    title: Empty Schema
  
  AcknowledgeChatRoomSessionMessagesRequest:
    type: object
    required:
      - receipt-handles
    properties:
      receipt-handles:
        type: array
        description: An array of receipt handles received from a previous chat room session poll
        items:
          $ref: '#/definitions/ChatMessageReceiptHandle'
  
  AwsV4SignatureSettings:
    type: object
    description: Parameters necessary for AWS v4 signature authentication
    required:
      - region
      - service
    properties:
      region:
        type: string
        description: AWS region name to use for AWS v4 signature authentication
      service:
        type: string
        description: AWS service name to use for AWS v4 signature authentication
  
  BasicAcknowledgementResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: |+
          A human-readable message confirming the request was received and 
          processed normally
  
  ChangeForgottenPasswordRequest:
    type: object
    required:
      - email-address
      - token
      - password
    properties:
      email-address:
        type: string
      token:
        type: string
        description: |+
          The password reset code retrieved from the message sent to the 
          user's e-mail address
      password:
        type: string
        format: password
        description: The new desired password

  ChangeKnownPasswordRequest:
    type: object
    required:
      - old-password
      - new-password
    properties:
      old-password:
        type: string
        format: password
        description: The existing password for the user
      new-password:
        type: string
        format: password
        description: The new desired password
  
  ChatMessageObject:
    type: object
    required:
      - author-name
      - identity-id
      - message
      - timestamp
    properties:
      author-name:
        type: string
        description: User-visible name for the message sender
      client-message-id:
        type: string
        description: An optional identifier chosen by the sending client
      identity-id:
        type: string
        description: Unique and permanent id for the message sender
      message:
        type: string
        description: The text of the message sent
      message-id:
        type: string
        description: A server-generated unique identifier for the message
      timestamp:
        type: integer
        description: Unix timestamp of message sent time
        format: int32
  
  ChatMessageReceiptHandle:
    type: string
    description: Represents an instance of retrieval of a chat room session message
  
  DefaultErrorResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: A human-readable message describing the error the occurred
  
  GetRoomMessagesResponse:
    type: object
    required:
      - receipt-handles
      - messages
    properties:
      receipt-handles:
        type: array
        items:
          $ref: '#/definitions/ChatMessageReceiptHandle'
      messages:
        type: array
        items:
          $ref: '#/definitions/ChatMessageObject'
  
  GlobalApiSettings:
    type: object
    required:
      - aws-v4-sig
    properties:
      aws-v4-sig:
        $ref: '#/definitions/AwsV4SignatureSettings'
  
  LoginRequest:
    type: object
    required:
      - email-address
      - password
    properties:
      email-address:
        type: string
        description: The e-mail address of the user. Must already be confirmed
      password:
        type: string
        format: password
  
  NewRoomMessageResponse:
    type: object
    required:
      - message-id
    properties:
      message-id:
        type: string
        description: The unique identifier for the new message
  
  NewRoomResponse:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: The unique identifier for the new room
  
  NewRoomSessionResponse:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: The unique identifier for the new session
  
  PostChatMessageRequest:
    type: object
    required:
      - version
      - message
    properties:
      version:
        type: string
        enum:
          - '1'
      message:
        type: string
      client-message-id:
        type: string
        description: |+
          Optional client-specified identifier. Will be returned with message 
          when pulled from room session
  
  RegisterUserRequest:
    type: object
    required:
      - email-address
      - password
    properties:
      email-address:
        type: string
        description: |+
          The e-mail address of the new user. Must not already be confirmed by 
          another user
      password:
        type: string
        description: |+
          The new password the user should use in login requests
        format: password
  
  RegisterUserResponse:
    type: object
    required:
      - email-address
      - registration-id
    properties:
      email-address:
        type: string
        description: |+
          The e-mail address to which the confirmation code was sent
      registration-id:
        type: string
        description: |+
          Unique registration id to be sent with the confirmation code to 
          confirm the user registration
  
  SendForgotPasswordCodeRequest:
    type: object
    required:
      - email-address
    properties:
      email-address:
        type: string
        description: E-mail address of a user that has already been confirmed
  
  UserCredentialsRetrievalResponse:
    type: object
    required:
      - credentials
      - user
    properties:
      credentials:
        $ref: '#/definitions/UserTemporaryCredentials'
      user:
        $ref: '#/definitions/UserBasicInfoObject'
        
  UserBasicInfoObject:
    type: object
    required:
      - email-address
      - user-id
      - api-key
    properties:
      email-address:
        type: string
      user-id:
        type: string
        description: User's permanent id as will be included in posted messages
  
  UserCredentialRefreshRequest:
    type: object
    required:
      - user-id
      - refresh-token
    properties:
      user-id:
        type: string
        description: The user id returned from the login request
      refresh-token:
        type: string
        description: The refresh token returned from the login request
  
  UserTemporaryCredentials:
    type: object
    required:
      - access-key-id
      - secret-access-key
      - session-token
      - expiration
      - refresh-token
    properties:
      access-key-id:
        type: string
        description: Access key id to use for AWS v4 signature
      secret-access-key:
        type: string
        description: Secret access key to use for AWS v4 signature
      session-token:
        type: string
        description: Session token to use in x-amz-security-token header for authenticated requests
      expiration:
        type: integer
        description: Number of seconds until credentials will expire
        format: int32
      refresh-token:
        type: string
        description: |+
          A longer duration token that can be used with an to request new 
          temporary credentials without re-entering a password
  
  UserUpdateRequest:
    type: object
    properties:
      email-address:
        type: string
        description: The new e-mail address for the user
  
  UserUpdateResponse:
    type: object
    required:
      - message
    properties:
      message:
        type: string
        description: |+
          A human-readable message confirming the request was received and 
          processed normally
      registration-id:
        type: string
        description: |+
          Unique registration id to be sent with the confirmation code to 
          confirm the new e-mail address

securityDefinitions:
  
  sigv4:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: awsSigv4